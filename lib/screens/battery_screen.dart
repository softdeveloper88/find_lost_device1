import 'package:battery_info/battery_info_plugin.dart';import 'package:battery_info/enums/charging_status.dart';import 'package:battery_info/model/android_battery_info.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:shared_preferences/shared_preferences.dart';//import for iOSclass BatteryScreen extends StatefulWidget {  const BatteryScreen({Key key}) : super(key: key);  @override  _BatteryScreenState createState() => _BatteryScreenState();}class _BatteryScreenState extends State<BatteryScreen> {  static const platform1 = const MethodChannel('flutter.native/helper');  static bool active = false;  String batterylevel = "";  static ChargingStatus chargingstatus =      ChargingStatus.Discharging; //by default, it is not charging  var pluginstatus;  SharedPreferences prefs;  Future<void> responseBattery(int status) async {    try {      if (status == 1) {        await platform1.invokeMethod("batteryStart");      } else if (status == 0) {        await platform1.invokeMethod("batteryStop");      }    } on PlatformException catch (e) {      print("Failed to Invoke: '${e.message}'.");    }    setState(() {      // _responseFromNativeCode1=res;    });  }  void responseIsPlug() async {    try {      return await platform1.invokeMethod("IsPlugOrNot");    } on PlatformException catch (e) {      print("Failed to Invoke: '${e.message}'.");    }  }  Future<void> prefrenses() async {    prefs = await SharedPreferences.getInstance();    active = prefs.getBool("active_plugin") ?? false;  }  @override  void initState() {    prefrenses();    AndroidBatteryInfo infoandroid = AndroidBatteryInfo();    // IosBatteryInfo infoios = IosBatteryInfo(); // use for iOS    Future.delayed(Duration.zero, () async {      //there is async (await) execution inside it      infoandroid = await BatteryInfoPlugin().androidBatteryInfo;      // infoios = await BatteryInfoPlugin().iosBatteryInfo;  for iOS      batterylevel = infoandroid.batteryLevel.toString();      pluginstatus = infoandroid.pluggedStatus;      chargingstatus = infoandroid.chargingStatus;      setState(() {        print(pluginstatus);        print(chargingstatus.toString());        //refresh UI      });    });    BatteryInfoPlugin()        .androidBatteryInfoStream        .listen((AndroidBatteryInfo batteryInfo) {      //add listiner to update values if there is changes      infoandroid = batteryInfo;      batterylevel = infoandroid.batteryLevel.toString();      chargingstatus = infoandroid.chargingStatus;      pluginstatus = infoandroid.pluggedStatus;      setState(() {        print(pluginstatus);        print(chargingstatus);        //refresh UI      });    });    // TODO: implement initState    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(title: Text("Battery Screen")),        body: Container(            width: double.infinity,            height: MediaQuery.of(context).size.height,            alignment: Alignment.center,            padding: EdgeInsets.all(40),            //set width and height of outermost wrapper to 100%;            child: Column(children: [              Center(                  child: Column(children: <Widget>[                Padding(                  padding: EdgeInsets.all(8),                  child: ElevatedButton(                    onPressed: () {                      print(chargingstatus.toString());                      // Be informed when the state (full, charging, discharging) changes                      if (chargingstatus.toString() ==                          "ChargingStatus.Charging") {                        if (active) {                          setState(() {                            responseBattery(0);                            active = false;                            prefs.setBool("active_plugin", active);                          });                        } else {                          setState(() {                            active = true;                            prefs.setBool("active_plugin", active);                            responseBattery(1);                          });                        }                      } else {                        // if (!active) {                        //   setState(() {                        //     active = false;                        //     prefs.setBool("active_plugin", active);                        //     responseBattery(0);                        //   });                        // }                        Fluttertoast.showToast(                            msg: "Please first connect to charger",                            toastLength: Toast.LENGTH_SHORT,                            gravity: ToastGravity.CENTER,                            timeInSecForIosWeb: 1,                            backgroundColor: Colors.red,                            textColor: Colors.white,                            fontSize: 16.0);                        print("Please connect with power first");                      }                    },                    child: Text(active ? "Deactivate" : "Activate"),                  ),                )              ]))            ])));  }}