import 'dart:convert';import 'package:find_lost_device1/model/device_model.dart';import 'package:firebase_database/firebase_database.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:http/http.dart' as http;import 'package:permission_handler/permission_handler.dart';import 'package:shared_preferences/shared_preferences.dart';class EraseDataScreen extends StatefulWidget {  String email, displayName, photoURL, uid;  EraseDataScreen({this.email, this.displayName, this.photoURL, this.uid});  @override  _EraseDataScreen createState() => _EraseDataScreen();}class _EraseDataScreen extends State<EraseDataScreen> {  List<DeviceModel> deviceModel = [];  bool active = false;  bool permissionGranted = false;  SharedPreferences prefs;  Future _getStoragePermission() async {    if (await Permission.storage.request().isGranted) {      setState(() {        permissionGranted = true;      });    } else if (await Permission.storage.request().isPermanentlyDenied) {      await openAppSettings();    } else if (await Permission.storage.request().isDenied) {      setState(() {        permissionGranted = false;      });    }  }  static const platform1 = const MethodChannel('flutter.native/helper');  Future<Null> responseIsDeleted(bool active) async {    try {      await platform1.invokeMethod('eraseData', {"active": active});    } on PlatformException catch (e) {      print("Failed to Invoke: '${e.message}'.");    }    setState(() {});  }  Future prefrenses() async {    prefs = await SharedPreferences.getInstance();    active = prefs.getBool("active_erase") ?? false;  }  @override  void initState() {    prefrenses();    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(title: Text("Erase Data Screen")),        body: Container(          width: double.infinity,          height: MediaQuery.of(context).size.height,          alignment: Alignment.center,          padding: EdgeInsets.all(40),          //set width and height of outermost wrapper to 100%;          child: EraseData(),        ));  }  Widget EraseData() {    return Column(      children: [        MaterialButton(          onPressed: () {            if (active) {              setState(() {                _getStoragePermission();                active = false;                prefs.setBool("active_erase", active);                responseIsDeleted(false);              });            } else {              setState(() {                active = true;                prefs.setBool("active_erase", active);                responseIsDeleted(true);              });            }          },          child: Text(active ? "Deactivate" : "Activate"),        ),        Expanded(            child: Center(          child: FutureBuilder(              future: FirebaseDatabase.instance.reference().once(),              builder:                  (BuildContext context, AsyncSnapshot<DataSnapshot> snapshot) {                if (snapshot.hasData) {                  deviceModel.clear();                  Map<dynamic, dynamic> values = snapshot.data.value;                  values.forEach((key, values) {                    if (values['email'] == widget.email) {                      deviceModel.add(DeviceModel(                          key,                          values['deviceModel'],                          values['email'],                          values['name'],                          values['manufactureName'],                          values['deviceToken'],                          values['lat'],                          values['lng']));                    }                  });                  return ListView.builder(                      itemCount: deviceModel.length,                      itemBuilder: (context, index) {                        return Card(                          color: Colors.red,                          //elevation: 2.0,                          child: GestureDetector(                            onTap: () {                              print("click");                              sendFcmMessage("Erase", "Erase my data",                                  deviceModel[index].deviceToken);                            },                            child: new ListTile(                              title: new Text(                                  "Device Mode:${deviceModel[index].deviceModel}"),                            ),                          ),                        );                      });                } else if (snapshot.hasError) {                  return Icon(Icons.error_outline);                } else {                  return CircularProgressIndicator();                }              }),        ))      ],    );  }  Future<bool> sendFcmMessage(      String title, String message, String token) async {    try {      var url = 'https://fcm.googleapis.com/fcm/send';      var header = {        "Content-Type": "application/json",        "Authorization":            "Bearer AAAAzpd-_iA:APA91bGqz8ppYKEP2Ff6GRn6Ksh3X-QwAGPx-c7vQTr_tpEa-y6C2VjJKAOc3duHuOrfDyJV2EE5kxVFlQLjnXYA0aFV700SjSBPb0bgC4rCxJzUI9ieeoXu4x2CvReJGfo5-wNOtTsl",      };      // var request = {      //   "notification": {      //     "title": title,      //     "text": message,      //     "sound": "default",      //     "color": "#990000",      //   },      //   "priority": "high",      //   "to": "/topics/all",      // };      // var request = {      //   'notification': {'title': title, 'body': message},      //   'data': {      //     'click_action': 'FLUTTER_NOTIFICATION_CLICK',      //     'type': 'COMMENT'      //   },      //   'to':token      // };      var request = {        "registration_ids": [token],        "priority": "high",        "data": {"body": message, "title": title}      };      // var request = {      //   "message":{      //     "token":token,      //     "data" : {      //       "title" : title,      //       "body" : message      //     }      //   }      // };      var response = await http.post(Uri.parse(url),          headers: header, body: json.encode(request));      print(response.body);      return true;    } catch (e, s) {      print(e);      return false;    }  }}