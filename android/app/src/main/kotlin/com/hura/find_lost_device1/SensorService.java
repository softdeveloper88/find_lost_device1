package com.hura.find_lost_device1;import android.app.Service;import android.content.Intent;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.os.IBinder;import android.util.Log;import android.widget.Toast;public class SensorService extends Service implements SensorEventListener {    private static final float ERROR = (float) 7.0;    private static final float SHAKE_THRESHOLD = 15.00f; // m/S**2    private static final int MIN_TIME_BETWEEN_SHAKES_MILLISECS = 1000;    private Sensor mySensor;    private SensorManager SM;    private float x1, x2, x3;    private long mLastShakeTime;    public SensorService() {    }    @Override    public IBinder onBind(Intent intent) {        // TODO: Return the communication channel to the service.        throw new UnsupportedOperationException("Not yet implemented");    }    @Override    public void onCreate() {    }    @Override    public void onSensorChanged(SensorEvent event) {        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {              Log.d("sensor","x:::"+event.values[0]+"y:::"+event.values[1]);            if( event.values[0]< -3 || event.values[0] > 3 || event.values[1]< -3 || event.values[1] > 3){               Log.d("event:::","Detected");            }//            long curTime = System.currentTimeMillis();//            if ((curTime - mLastShakeTime) > MIN_TIME_BETWEEN_SHAKES_MILLISECS) {//                float x = event.values[0];//                float y = event.values[1];//                float z = event.values[2];//                double acceleration = Math.sqrt(Math.pow(x, 2) +//                        Math.pow(y, 2) +//                        Math.pow(z, 2)) - SensorManager.GRAVITY_EARTH;//                Log.d("mySensor", "Acceleration is " + acceleration + "m/s^2");//                if (acceleration > SHAKE_THRESHOLD) {//                    mLastShakeTime = curTime;//                    Toast.makeText(getApplicationContext(), "FALL DETECTED",//                            Toast.LENGTH_LONG).show();//                }//            }        }    }    @Override    public void onAccuracyChanged(Sensor sensor, int accuracy) {    }    public int onStartCommand(Intent intent, int flags, int startId) {        Toast.makeText(this, "Start Detecting", Toast.LENGTH_LONG).show();        SM = (SensorManager) getSystemService(SENSOR_SERVICE);        mySensor = SM.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);        SM.registerListener(this, mySensor, SensorManager.SENSOR_DELAY_NORMAL);        //here u should make your service foreground so it will keep working even if app closed        return Service.START_STICKY;    }    @Override    public void onDestroy() {        SM.unregisterListener(this);        Toast.makeText(this,"Destroy call",Toast.LENGTH_SHORT).show();        super.onDestroy();    }}