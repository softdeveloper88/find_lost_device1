package com.hura.find_lost_device1;import android.app.Notification;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.app.Service;import android.content.Intent;import android.content.IntentFilter;import android.os.Build;import android.os.IBinder;import android.util.Log;import androidx.annotation.Nullable;import androidx.core.app.NotificationCompat;import com.hura.find_lost_device1.R;public class ForegroundService extends Service {    public static final String CHANNEL_ID = "ForegroundServiceChannel";    @Override    public void onCreate() {        super.onCreate();    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        String input = intent.getStringExtra("inputExtra");        IntentFilter intentFilter = new IntentFilter();        Log.d("messageData",input);        intentFilter.addAction("YourBroadcastReceiver");//        registerReceiver(new YourBroadcastReceiver(), intentFilter);//        IntentFilter filter = new IntentFilter();//        filter.addAction("Flash"); //further more//        registerReceiver(new MyBroadcastReceiver(), intentFilter);////        Intent intent1=new Intent();//        intent1.setAction("YourBroadcastReceiver");//        intent1.putExtra("message", "Flash");//        intent1.putExtra("title", "Flash");//        this.startService(intent1);        createNotificationChannel();        Intent notificationIntent = new Intent(this, MainActivity.class);        PendingIntent pendingIntent = PendingIntent.getActivity(this,                0, notificationIntent, 0);        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)                .setContentTitle("Foreground Service")                .setContentText(input)                .setSmallIcon(R.mipmap.ic_launcher)                .setContentIntent(pendingIntent)                .build();        startForeground(1, notification);        //do heavy work on a background thread        //stopSelf();        return START_NOT_STICKY;    }    @Override    public void onDestroy() {        super.onDestroy();    }    @Nullable    @Override    public IBinder onBind(Intent intent) {        return null;    }    private void createNotificationChannel() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            NotificationChannel serviceChannel = new NotificationChannel(                    CHANNEL_ID,                    "Foreground Service Channel",                    NotificationManager.IMPORTANCE_DEFAULT            );            NotificationManager manager = getSystemService(NotificationManager.class);            manager.createNotificationChannel(serviceChannel);        }    }}