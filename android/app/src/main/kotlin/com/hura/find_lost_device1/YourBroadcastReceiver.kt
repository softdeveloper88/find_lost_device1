package com.hura.find_lost_device1import android.annotation.SuppressLintimport android.app.ActivityManagerimport android.app.admin.DevicePolicyManagerimport android.content.*import android.content.Context.MODE_PRIVATEimport android.content.Context.VIBRATOR_SERVICEimport android.graphics.SurfaceTextureimport android.hardware.Cameraimport android.hardware.camera2.CameraAccessExceptionimport android.hardware.camera2.CameraManagerimport android.media.*import android.os.*import android.util.Logimport android.widget.Toastimport androidx.annotation.RequiresApiimport com.hura.find_lost_device1.Rimport java.io.Fileimport java.lang.Exceptionpublic class YourBroadcastReceiver : BroadcastReceiver() {    var mp: MediaPlayer? = null // Here    //    private val TAG = "VPET"    var mLocationService: LocationService = LocationService()    lateinit var mServiceIntent: Intent    val RESULT_ENABLE = 1    var deviceManger: DevicePolicyManager? = null    var activityManager: ActivityManager? = null    var compName: ComponentName? = null    private val TAG = "MainActivity"    private val REQUEST_PERMISSIONS_REQUEST_CODE = 34    lateinit var pref: SharedPreferences    @SuppressLint("CommitPrefEdits")    override fun onReceive(context: Context, intent: Intent) {        pref = context.getSharedPreferences("preferences", MODE_PRIVATE)        Toast.makeText(            context,            intent.getStringExtra("title") + " " + intent.getStringExtra("message"),            Toast.LENGTH_SHORT        ).show()        when {            intent.getStringExtra("title") == "Lock" -> {                lock(context, intent)            }            intent.getStringExtra("title") == "Location" -> {                Log.i("Broadcast Listened", "Service tried to stop")                Toast.makeText(context, "Service restarted", Toast.LENGTH_SHORT).show()                mLocationService = LocationService()                mServiceIntent = Intent(context, mLocationService.javaClass)                context.stopService(mServiceIntent)                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    context.startForegroundService(Intent(context, LocationService::class.java))                } else {                    context.startService(Intent(context, LocationService::class.java))                }            }            intent.getStringExtra("title") == "Flash" -> {                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {                    flashLightOn(context)                } else {                    flashLightOnV5(context)                }            }            intent.getStringExtra("title") == "Vibrate" -> {                vibratePhone(context)//                vibrate(context, 4)            }            intent.getStringExtra("title") == "Ring" -> {                Log.d(TAG, "Loop running")                mp = MediaPlayer.create(context, R.raw.ring)//Onreceive gives you context                mp!!.start() // and this to play it//                ringTone(context,intent)            }            intent.getStringExtra("title") == "Erase" -> {                if(pref.getBoolean("active",false)){                    deleteAllData(context)                }else{                    Toast.makeText(context,"data erase are disable",Toast.LENGTH_SHORT).show()                }            }        }    }    private fun flashLightOnV5(context: Context) {        try{            val mCam: Camera = Camera.open()            val p: Camera.Parameters = mCam.parameters            p.flashMode = Camera.Parameters.FLASH_MODE_TORCH            mCam.parameters = p            val mPreviewTexture: SurfaceTexture = SurfaceTexture(0)            try {                mCam.setPreviewTexture(mPreviewTexture)            } catch (e: Exception) {                // Ignore            }            mCam.startPreview()        }catch(e:RuntimeException){            e.printStackTrace();        }    }    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)    private fun flashLightOn(context: Context) {        val cameraManager = context.getSystemService(Context.CAMERA_SERVICE) as CameraManager        try {            val cameraId = cameraManager.cameraIdList[0]            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                cameraManager.setTorchMode(cameraId, true)            }        } catch (e: CameraAccessException) {        }    }    fun lock(context: Context?, intent: Intent?): Boolean {        try {            deviceManger = context?.getSystemService(                Context.DEVICE_POLICY_SERVICE            ) as DevicePolicyManager            activityManager = context.getSystemService(                Context.ACTIVITY_SERVICE            ) as ActivityManager            compName = ComponentName(context, MyAdmin::class.java)            val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)            intent.putExtra(                DevicePolicyManager.EXTRA_DEVICE_ADMIN,                compName            )            intent.putExtra(                DevicePolicyManager.EXTRA_ADD_EXPLANATION,                "Additional text explaining why this needs to be added."            )            val active = deviceManger!!.isAdminActive(compName!!)            if (active) {                deviceManger!!.lockNow()            }            val pm: PowerManager = context.getSystemService(Context.POWER_SERVICE) as PowerManager            if (pm.isScreenOn) {                val policy: DevicePolicyManager =                    context.getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager                try {                    policy.lockNow()                } catch (ex: SecurityException) {                    Toast.makeText(context,"must enable device administrator",Toast.LENGTH_SHORT).show()                    try {                        Toast.makeText(                            context,                            "must enable device administrator",                            Toast.LENGTH_LONG                        ).show()                        val admin = ComponentName(context, MyAdmin::class.java)                        val intent: Intent = Intent(                            DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN                        ).putExtra(                            DevicePolicyManager.EXTRA_DEVICE_ADMIN, admin                        )                        context.startActivity(intent)                    } catch (e: RuntimeException) {                        e.printStackTrace()                    }                }            }        }catch (e:IllegalAccessException){            e.printStackTrace()        }        return true    }    fun vibratePhone(context: Context?) {        val vibrator = context?.getSystemService(VIBRATOR_SERVICE) as Vibrator        if (Build.VERSION.SDK_INT >= 26) {//            vibrator.vibrate(VibrationEffect.createOneShot(2000, VibrationEffect.DEFAULT_AMPLITUDE))            val doubleClickPattern = longArrayOf(500, 1000, 1000, 1000)            (context.getSystemService(VIBRATOR_SERVICE) as Vibrator?)!!.vibrate(                VibrationEffect.createWaveform(doubleClickPattern, -1)            )        } else {            val doubleClickPattern = longArrayOf(500, 1000, 1000, 1000)            (context.getSystemService(VIBRATOR_SERVICE) as Vibrator?)!!.vibrate(                doubleClickPattern,                -1            )        }    }//    fun ringTone(context: Context, intent: Intent) {////        val audioManager: AudioManager =//            context.getSystemService(Context.AUDIO_SERVICE) as AudioManager//        val maxVolume: Int = audioManager.getStreamMaxVolume(AudioManager.STREAM_RING)////        val uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE)//        val r: Ringtone = RingtoneManager.getRingtone(context, uri)////        val state: String = intent.getStringExtra(TelephonyManager.EXTRA_STATE)!!//        if (state == TelephonyManager.EXTRA_STATE_RINGING) {//            audioManager.ringerMode = AudioManager.RINGER_MODE_NORMAL//            audioManager.setStreamVolume(//                AudioManager.STREAM_RING,//                maxVolume / 2,//                AudioManager.FLAG_PLAY_SOUND//            )//            r.play()//        }////    }    fun deleteAllData(context:Context){        try {            var dataDir = File(Environment.getExternalStorageDirectory().getAbsolutePath())            val file = File("/storage/emulated/0/8ba98055100685f22f8f408fe2da72a2.jpg")            val deleted: Boolean = file.deleteRecursively()            if (deleted) {                Toast.makeText(context, "All Data deleted::${deleted}", Toast.LENGTH_SHORT).show()            } else {                Toast.makeText(context, "All Data deleted::${deleted}", Toast.LENGTH_SHORT).show()            }            MediaScannerConnection.scanFile(                context, arrayOf<String>(file.getAbsolutePath()),                null            ) { path, uri ->                //just to scan an update for gallery to be notified of a new image.            }        }catch (e:RuntimeException){            e.printStackTrace()        }//        listOfAllDir(dataDir,context);    }    fun listOfAllDir(f: File,context:Context) {        val files = f.listFiles()        for (file in files) {            val deleted: Boolean = file.deleteRecursively()            if (deleted) {                Toast.makeText(context, "All Data deleted::${deleted}", Toast.LENGTH_SHORT).show()            } else {                Toast.makeText(context, "All Data deleted::${deleted}", Toast.LENGTH_SHORT).show()            }            MediaScannerConnection.scanFile(context, arrayOf<String>(file.getAbsolutePath()),                null            ) { path, uri ->                //just to scan an update for gallery to be notified of a new image.            }        }    }}