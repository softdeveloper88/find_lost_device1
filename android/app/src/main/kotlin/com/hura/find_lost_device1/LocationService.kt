package com.hura.find_lost_device1import android.Manifestimport android.annotation.SuppressLintimport android.app.Notificationimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.app.Serviceimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.Colorimport android.location.Locationimport android.os.Buildimport android.os.IBinderimport android.provider.Settingsimport android.util.Logimport androidx.annotation.RequiresApiimport androidx.core.app.NotificationCompatimport androidx.core.content.ContextCompatimport com.google.android.gms.location.*import com.google.firebase.database.DatabaseReferenceimport com.google.firebase.database.FirebaseDatabaseimport java.util.* class LocationService : Service() {    var counter = 0    var latitude: Double = 0.0    var longitude: Double = 0.0    private val TAG = "LocationService"    override fun onCreate() {        super.onCreate()        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O) createNotificationChanel() else startForeground(            1,            Notification()        )        requestLocationUpdates()    }    @RequiresApi(Build.VERSION_CODES.O)    private fun createNotificationChanel() {        val NOTIFICATION_CHANNEL_ID = "com.hura"        val channelName = "Background Service"        val chan = NotificationChannel(            NOTIFICATION_CHANNEL_ID,            channelName,            NotificationManager.IMPORTANCE_NONE        )        chan.lightColor = Color.BLUE        chan.lockscreenVisibility = Notification.VISIBILITY_PRIVATE        val manager =            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)        manager.createNotificationChannel(chan)        val notificationBuilder =            NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)        val notification: Notification = notificationBuilder.setOngoing(true)            .setContentTitle("App is running count::" + counter)            .setPriority(NotificationManager.IMPORTANCE_MIN)            .setCategory(Notification.CATEGORY_SERVICE)            .build()        startForeground(2, notification)    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        super.onStartCommand(intent, flags, startId)        startTimer()        requestLocationUpdates()        return START_STICKY    }    override fun onDestroy() {        super.onDestroy()        stoptimertask()        val broadcastIntent = Intent()        broadcastIntent.action = "YourBroadcastReceiver"        broadcastIntent.setClass(this, YourBroadcastReceiver::class.java)        this.sendBroadcast(broadcastIntent)    }    private var timer: Timer? = null    private var timerTask: TimerTask? = null    fun startTimer() {        timer = Timer()        timerTask = object : TimerTask() {            override fun run() {                val count = counter++                if (latitude != 0.0 && longitude != 0.0) {                    Log.d(                        "Location::",                        latitude.toString() + ":::" + longitude.toString() + "Count" +                                count.toString()                    )                    updateLatLng(latitude, longitude)                }            }        }        timer!!.schedule(            timerTask,            0,            50000        ) //1 * 60 * 1000 1 minute    }    @SuppressLint("HardwareIds")    private fun updateLatLng(latitude: Double, longitude: Double) {        val android_id = Settings.Secure.getString(            application.contentResolver,            Settings.Secure.ANDROID_ID        )        if (android_id != null) {            val database: FirebaseDatabase = FirebaseDatabase.getInstance()            val mDatabaseRef: DatabaseReference = database.reference            val childRef = mDatabaseRef.child(android_id)            childRef.child("lat").setValue(latitude)            childRef.child("lng").setValue(longitude)        }    }    fun stoptimertask() {        if (timer != null) {            timer!!.cancel()            timer = null        }    }    override fun onBind(intent: Intent?): IBinder? {        return null    }    private fun requestLocationUpdates() {        val request = LocationRequest()        request.interval = 10000        request.fastestInterval = 5000        request.priority = LocationRequest.PRIORITY_HIGH_ACCURACY        val client: FusedLocationProviderClient =            LocationServices.getFusedLocationProviderClient(this)        val permission = ContextCompat.checkSelfPermission(            this,            Manifest.permission.ACCESS_FINE_LOCATION        )        if (permission == PackageManager.PERMISSION_GRANTED) { // Request location updates and when an update is            // received, store the location in Firebase            client.requestLocationUpdates(request, object : LocationCallback() {                override fun onLocationResult(locationResult: LocationResult) {                    val location: Location = locationResult.lastLocation                    if (location != null) {                        latitude = location.latitude                        longitude = location.longitude                        updateLatLng(latitude, longitude)                        Log.d("Location Service", "location update $location")                    }                }            }, null)        }    }}