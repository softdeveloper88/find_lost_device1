package com.hura.find_lost_device1import android.app.*import android.content.Contextimport android.content.Intentimport android.hardware.camera2.CameraAccessExceptionimport android.hardware.camera2.CameraManagerimport android.media.RingtoneManagerimport android.os.Buildimport android.os.Looperimport android.os.Parcelimport android.os.Parcelableimport android.util.Logimport android.widget.Toastimport androidx.annotation.RequiresApiimport androidx.core.app.NotificationCompatimport androidx.core.content.ContextCompatimport androidx.work.OneTimeWorkRequestimport androidx.work.WorkManagerimport com.hura.find_lost_device1.Rimport com.google.firebase.messaging.FirebaseMessagingServiceimport com.google.firebase.messaging.RemoteMessageimport java.util.logging.Handlerclass FCMNotification() : FirebaseMessagingService() {     @RequiresApi(Build.VERSION_CODES.O)    override fun onMessageReceived(remoteMessage: RemoteMessage) {        Log.d("message from android:",remoteMessage.messageId.toString())         val message=remoteMessage.data["title"];         val intents =             Intent(this, YourBroadcastReceiver::class.java).setAction("YourBroadcastReceiver")         intents.putExtra("message", remoteMessage.data["body"])         intents.putExtra("title", remoteMessage.data["title"])////         if( message=="Ring"){//             val pendingIntent = PendingIntent.getBroadcast(this, 0, intents, 0)//             val alarmManager: AlarmManager = getSystemService(ALARM_SERVICE) as AlarmManager//             alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, 0, 10, pendingIntent)//             sendBroadcast(intents)//         }else {//             val intents =//                 Intent(this, YourBroadcastReceiver::class.java).setAction("YourBroadcastReceiver")//             intents.putExtra("message", remoteMessage.data["body"])//             intents.putExtra("title", remoteMessage.data["title"])//        startForegroundService(intents)             sendBroadcast(intents)             Log.d("TAG", "From: ${remoteMessage.from}")//         }        sendNotification(remoteMessage.data["title"]!!,remoteMessage.data["body"]!!);        // Check if message contains a data payload.        if (remoteMessage.data.isNotEmpty()) {            Log.d("TAG", "Message data payload: ${remoteMessage.data}")            if (/* Check if data needs to be processed by long running job */ true) {                // For long-running tasks (10 seconds or more) use WorkManager.                scheduleJob()//             Log.d("10 sec",remoteMessage.notification!!.title.toString())            } else {//                Log.d("within 10 sec",remoteMessage.notification!!.title.toString())                // Handle message within 10 seconds                handleNow()            }        }        // Check if message contains a notification payload.        remoteMessage.notification?.let {            Log.d("dd", "Message Notification Body: ${it.body}")        }        // Also if you intend on generating your own notifications as a result of a received FCM        // message, here is where that should be initiated. See sendNotification method below.    }     private fun sendNotification(title:String ,messageBody: String) {         val intent = Intent(this, MainActivity::class.java)         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)         val pendingIntent = PendingIntent.getActivity(this, 0,             intent,             PendingIntent.FLAG_ONE_SHOT)         val channelId = getString(R.string.default_notification_channel_id)         val defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)         val notificationBuilder = NotificationCompat.Builder(             this, channelId         )             .setSmallIcon(R.mipmap.ic_launcher)             .setContentTitle(title)             .setContentText(messageBody)             .setAutoCancel(false)             .setSound(defaultSoundUri)             .setContentIntent(pendingIntent)         val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O) {             val channel = NotificationChannel(channelId,                 "Channel human readable title",                 NotificationManager.IMPORTANCE_DEFAULT)             notificationManager.createNotificationChannel(channel)         }         notificationManager.notify(0, notificationBuilder.build())     }     private fun scheduleJob() {        // [START dispatch_job]        val work = OneTimeWorkRequest.Builder(MyWorker::class.java).build()        WorkManager.getInstance(this).beginWith(work).enqueue()        // [END dispatch_job]    }    /**     * Handle time allotted to BroadcastReceivers.     */    private fun handleNow() {        Log.d(TAG, "Short lived task is done.")    }    companion object {        private const val TAG = "MyFirebaseMsgService"    }     @RequiresApi(Build.VERSION_CODES.M)     private fun flashLightOn(context: Context) {         val cameraManager: CameraManager =             context.getSystemService(Context.CAMERA_SERVICE) as CameraManager         try {             val cameraId: String = cameraManager.cameraIdList.get(0)             cameraManager.setTorchMode(cameraId, true)         } catch (e: CameraAccessException) {         }     } }